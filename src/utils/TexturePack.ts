import { doCommand, Core } from "../core/Core"
import { File } from "../core/File";
import { foreach } from "../core/Attibute";
import { refreshUV } from "../core/Tools";


export interface ITexturePackSetting {
    cmdPath?: string;
    pngPath?: string;
    outPath?: string;
    format?: string;
    sheet?: string;
    data?: string;
    extrude?: number;
    textureFormat?: string;
    rotation?: boolean;
}


// Generated by https://quicktype.io

export interface ITexturePackData {
    frames: { [key: string]: ITexturePackFrameValue };
    meta: ITexturePackMeta;
}

export interface ITexturePackFrameValue {
    frame: ITexturePackSpriteSourceSizeClass;
    rotated: boolean;
    trimmed: boolean;
    spriteSourceSize: ITexturePackSpriteSourceSizeClass;
    sourceSize: ITexturePackSize;
}

export interface ITexturePackSpriteSourceSizeClass {
    x: number;
    y: number;
    w: number;
    h: number;
}

export interface ITexturePackSize {
    w: number;
    h: number;
}

export interface ITexturePackMeta {
    app: string;
    version: string;
    image: string;
    format: string;
    size: ITexturePackSize;
    scale: string;
    smartupdate: string;
}


export class TexturePack {


    static async packByCommand() {

        let { path, out } = Core.config;

        await this.pack({ pngPath: path, outPath: out })

        // console.log("success")



    }


    static async pack(setting?: ITexturePackSetting) {

        let { cmdPath, pngPath, outPath, format, sheet, data, extrude, textureFormat, rotation } = setting;


        if (!pngPath) {
            return `pngPath not set`;
        } else {

            let pngDir = new File(pngPath);
            if (pngDir.exists == false) {
                return `pngPath not exists`;
            } else {

                let origin = pngDir.resolvePath("origin.png");
                if (!origin.exists) {
                    let temp = Core.appPath.resolvePath("assets/origin.png");
                    if (temp.exists) {
                        temp.copyto(origin);
                    }
                }

                cmdPath = cmdPath || `C:/Program Files/CodeAndWeb/TexturePacker/bin/`;
                format = format || "json";

                let outDir: File;

                if (!outPath) {
                    outDir = pngDir.parent.resolvePath(pngDir.name + "_output");
                } else {
                    outDir = new File(outPath);
                }

                if (!outDir.exists) {
                    outDir.mkdir();
                }

                if (!sheet) {
                    sheet = outDir.resolvePath("diff.png").nativePath;
                }

                let dataFile: File;

                if (!data) {
                    data = outDir.resolvePath("data.json").nativePath;
                }

                dataFile = new File(data);

                extrude = extrude || 0
                textureFormat = textureFormat || "png8";
                rotation = rotation || false;


                let cmd = `TexturePacker.exe ${pngPath} --format ${format} --sheet ${sheet} --data ${data} --extrude ${extrude} --texture-format ${textureFormat} ${rotation ? "" : "--disable-rotation"}`
                console.log(cmd);
                await doCommand(cmd, cmdPath);

                


                let source = this.json2Tsouce(dataFile);

                dataFile.parent.resolvePath("data.dat").writeObject(source);

                dataFile.delete();

            }
        }


    }


    static json2Tsouce(file: File) {
        let data = JSON.parse(file.readUTF8()) as ITexturePackData;

        let frames = {};

        let { w: width, h: height } = data.meta.size

        foreach(data.frames, (v, k: string) => {

            let { x, y, w, h } = v.frame;
            let { x: ix, y: iy } = v.spriteSourceSize;

            k = k.slice(0, k.lastIndexOf("."));

            let vo = { x, y, w, h, ix, iy } as IBitmapSourceVO;
            refreshUV(vo, width, height);
            frames[k] = vo;
            return true;
        })


        let source = { frames, width, height } as ITSourceData;


        return source;

    }

}


// export function TexturePack(setting: ITexturePackSetting) {
//     let cmdPath = `C:/Program Files/CodeAndWeb/TexturePacker/bin/`
//     let cmdPath2 = ``
//     let cmd = cmdPath2 + `TexturePacker.exe D:/workspace/pigpark/pigpark/ui/assets/main/assets/ --format json --sheet D:/role.png --data D:/role.json --extrude 0 --texture-format png8 --disable-rotation`
//     doCommand(cmd, cmdPath, "gb2312", true);
// }
