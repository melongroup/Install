
// Generated by https://quicktype.io
declare interface ITiledData {
    height: number;
    infinite: boolean;
    layers: ITiledLayer[];
    nextlayerid: number;
    nextobjectid: number;
    orientation: string;
    properties: ITiledProperty[];
    renderorder: string;
    tiledversion: string;
    tileheight: number;
    tilesets: ITileset[];
    tilewidth: number;
    type: string;
    version: number;
    width: number;
}

declare interface ITiledLayer {
    data?: number[];
    height?: number;
    id: number;
    name: string;
    opacity: number;
    type: string;
    visible: boolean;
    width?: number;
    x: number;
    y: number;
    image?: string;
    draworder?: string;
    objects?: any[];
    offsetx?: number;
    offsety?: number;
    properties: { name: string, type: string, value: any }[]
}

declare interface ITiledProperty {
    name: string;
    type: string;
    value: string;
}

declare interface ITileset {
    firstgid: number;
    source: string;
    path: string;
    name: string;
    image: ITiledImage;
}

// Generated by https://quicktype.io

declare interface ITile {
    id: number;
    image: string;
    imageheight: number;
    imagewidth: number;
}

// Generated by https://quicktype.io

declare interface ITiledImage {
    columns: number;
    image: string;
    imageheight: number;
    imagewidth: number;
    margin: number;
    name: string;
    spacing: number;
    tilecount: number;
    tiledversion: string;
    tileheight: number;
    tilewidth: number;
    type: string;
    version: number;
    tiles: ITile[]

    firstgid: number;
    path: string;
}









declare interface IBitmapSourceVO {

    x: number;
    y: number;

    w: number;
    h: number;

    ix: number;
    iy: number;

    ul: number;
    ur: number;
    vt: number;
    vb: number;

    // scale: number;
    name: string;

    // used: number;
    // time: number;
    // rw: number;
    // rh: number;
}

declare interface ITSourceClip {
    res: string;
    x: number;
    y: number;
    duration: number;
    next: null;

    event?: string[];
}



declare interface ITSourceData {
    frames: { [key: string]: IBitmapSourceVO }
    clips: { [key: string]: ITSourceClip[] };
    // symbols:{[key: string] : IDisplaySymbol}
    // root:string;
    width: number;
    height: number;
}



declare interface ITiledReleaseData {
    id: string;

    name: string;

    w: number;
    h: number;

    gw: number;
    gh: number;

    gew: number;
    geh: number;

    hgew: number;
    hgeh: number;

    byte: ArrayBuffer;

    //textures
    textures: ITiledReleaseTexture[];
    //layers
    layers: ITiledReleaseLayer[];

    stone: ITiledReleaseLayer;

    monsters: { x: number, y: number, id: string }[];

    createpos: number[];
    orientation: string

}

declare interface ITiledReleaseTexture {
    width: number;
    height: number;
    source: string;
}

declare interface ITiledReleaseLayer {
    name: string;
    pro: any;
    x: number;
    y: number;
    elements: ITiledReleaseElement[];
}

declare interface ITiledReleaseElement {
    x: number;
    y: number;
    i: number;
    s: string;
}